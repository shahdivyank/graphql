package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"graphql/graph/model"

	"github.com/google/uuid"
)

// Beatdrop is the resolver for the beatdrop field.
func (r *mutationResolver) Beatdrop(ctx context.Context, input model.NewBeat) (*model.Beat, error) {
	panic(fmt.Errorf("not implemented: Beatdrop - beatdrop"))
}

// AddNewUser is the resolver for the add_new_user field.
func (r *mutationResolver) AddNewUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	id := uuid.New()

	user := &model.User{
		ID:       id,
		Name:     input.Name,
		Username: input.Username,
		Bio:      input.Bio,
	}

	r.users = append(r.users, user)

	return user, nil
}

// AddComment is the resolver for the add_comment field.
func (r *mutationResolver) AddComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: AddComment - add_comment"))
}

// Beats is the resolver for the beats field.
func (r *queryResolver) Beats(ctx context.Context) ([]*model.Beat, error) {
	return r.beatdrops, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.users, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	return r.comments, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
