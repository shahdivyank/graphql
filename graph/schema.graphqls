scalar UUID
scalar Time

type User {
  id: UUID!
  name: String!
  firebaseID: String!
  phone: String!
  username: String!
  bio: String!
  beatdrops: Int!
  friends: Int!
  settings: String!
  photo: String!
  timestamp: Time!
}

type Comment {
  id: UUID!
  timestamp: Time!
  user: User!
  beat: Beat!
  comment: String!
}

type Beat {
  id: UUID!
  user: User!
  location: String!
  timestamp: Time!
  song: String!
  artist: String!
  description: String!
  longitude: Float!
  latitude: Float!
  image: String!
  comments: Int!
}

type Friend {
  id: UUID!
  alpha: User!
  beta: User!
  timestamp: Time!
  status: Int!
  sender: UUID!
}

type Activity {
  id: UUID!
  user: User!
  content: String!
  timestamp: Time!
  beat: Beat!
}

type Query {
  users(name: String!): [User!]!

  beats(id: UUID!): [Beat!]!
  user(id: UUID!): User!
  userFirebaseID(firebaseID: String!): User!
  beatdrop(id: UUID!): Beat!
  comments(id: UUID!): [Comment!]!
  beatdrops(id: UUID!): [Beat!]!

  friends(id: UUID!, status: Int!): [Friend!]!

  activity(id: UUID!): [Activity!]!
}

input AcceptFriend {
  id: UUID!
}

input DenyFriend {
  id: UUID!
}

input NewFriend {
  user: UUID!
  friend: UUID!
}

input NewBeat {
  user: UUID!
  location: String!
  song: String!
  artist: String!
  description: String!
  longitude: Float!
  latitude: Float!
  image: String!
}

input NewUser {
  name: String!
  firebaseID: String!
  phone: String!
  username: String!
  bio: String!
}

input NewComment {
  user: UUID!
  beat: UUID!
  comment: String!
}

input UpdateBio {
  user: UUID!
  bio: String!
}

input UpdateUsername {
  user: UUID!
  username: String!
}

type Mutation {
  add_beat(input: NewBeat!): Beat!
  add_new_user(input: NewUser!): User!
  add_comment(input: NewComment!): Comment!

  update_bio(input: UpdateBio!): String!
  update_username(input: UpdateUsername!): String!

  add_friend(input: NewFriend!): String!
  accept_friend(input: AcceptFriend!): String!
  deny_friend(input: DenyFriend!): String!
}
